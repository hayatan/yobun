---
description: 
globs: 
alwaysApply: true
---

# Yobun リポジトリ コーディングルール

## 1. プロジェクト構造
### 1.1 ディレクトリ構造
- `src/`: ソースコードのルートディレクトリ
  - `util/`: 共通ユーティリティ関数
  - その他のJSファイル: アプリケーションのメイン処理

### 1.2 ファイル命名規則
- スネークケース (`snake_case`) を使用
  - 例: `slorepo-config.js`, `scrape.js`
- 機能を表す明確な名前を使用すること

## 2. コーディング規約
### 2.1 関数定義
- アロー関数を基本とする
  ```javascript
  const functionName = async (param1, param2) => {
    // 処理
  };
  ```
- ただし、モジュールのメイン関数は通常の関数宣言を使用可
  ```javascript
  async function mainFunction(param1, param2) {
    // 処理
  }
  ```

### 2.2 非同期処理
- Promise based な実装を使用
- async/await を積極的に活用
- エラーハンドリングは try-catch で適切に処理

### 2.3 変数命名
- キャメルケース (`camelCase`) を使用
- 意味のある具体的な名前を使用
  - Good: `machineNumber`, `graphData`
  - Bad: `data`, `temp`

### 2.4 エラーハンドリング
- エラーは適切にキャッチし、ログ出力を行う
- エラー発生時は処理を継続できる場合は空配列を返す
- エラーメッセージは日本語で具体的に記述

### 2.5 コメント
- 日本語でのコメントを推奨
- 関数の目的や複雑なロジックには必ずコメントを付ける
- 一時的なコメントアウトは削除する

## 3. データ処理
### 3.1 データ整形
- CSVなどに出力する可能性のある数値データは適切に整形してから使用
  ```javascript
  function cleanNumber(value) {
    return parseInt(value.replace(/,/g, '').replace(/^\+/, ''));
  }
  ```

### 3.2 データ構造
- オブジェクトは明確なプロパティ名を使用
- 配列操作は map, filter, reduce などの関数型メソッドを優先

## 4. 外部ライブラリ
### 4.1 Puppeteer
- ページ遷移時は適切なインターバルを設定
- セレクタは具体的に指定
- エラーハンドリングを必ず実装

## 5. 設定ファイル
### 5.1 構成
- 環境依存の値は設定ファイルに分離
- 設定は明確な構造化を行う
  ```javascript
  module.exports = {
    holes: [
      {
        name: "店舗名",
        code: "店舗コード"
      }
    ]
  };
  ```

## 6. ログ出力
### 6.1 ログレベル
- エラー: `console.error()`
- 情報: `console.log()`
- デバッグ情報は本番環境では出力しない

### 6.2 ログフォーマット
- 日時、処理内容、対象を明確に記載
- エラーログは具体的な情報を含める
