---
description: 
globs: 
alwaysApply: true
---

# Yobun リポジトリ コーディングルール

## 1. プロジェクト構造
### 1.1 ディレクトリ構造
- `src/`: ソースコードのルートディレクトリ
  - `util/`: 共通ユーティリティ関数
  - `db/`: データベース関連の処理
    - `sqlite/`: SQLite関連の処理
    - `bigquery/`: BigQuery関連の処理
  - `config/`: 設定ファイル
  - `services/`: 外部サービスとの連携

### 1.2 ファイル命名規則
- スネークケース (`snake_case`) を使用
  - 例: `slorepo-config.js`, `scrape.js`
- 機能を表す明確な名前を使用すること

## 2. コーディング規約
### 2.1 モジュール
- ES6モジュールを使用
  ```javascript
  import module from './module.js';
  export default function() { ... }
  ```
- ファイル拡張子`.js`を明示的に指定

### 2.2 非同期処理
- `async/await`を基本とする
  ```javascript
  const process = async () => {
    try {
      await someAsyncOperation();
    } catch (error) {
      console.error('エラーの詳細:', error);
    }
  };
  ```
- エラーハンドリングは`try/catch`で統一

### 2.3 データ処理
- 数値データの整形は`util/common.js`に集約
  ```javascript
  const cleanNumber = (value) => {
    return parseInt(value.replace(/,/g, '').replace(/^\+/, ''));
  };
  ```
- データのバリデーションを実装
  ```javascript
  const validateData = (data) => {
    return data.every(row => /* バリデーション条件 */);
  };
  ```

### 2.4 ログ出力
- 日付とホール名を明示的に表示
  ```javascript
  console.log(`[${date}][${hole.name}] 処理を開始します...`);
  ```
- エラーメッセージは具体的に記述
  ```javascript
  console.error(`[${date}][${hole.name}] エラーが発生しました: ${error.message}`);
  ```

### 2.5 設定管理
- 環境変数は`dotenv`で管理
  ```javascript
  import 'dotenv/config';
  const dbPath = process.env.SQLITE_DB_PATH;
  ```
- ホール設定は`slorepo-config.js`に集約
  ```javascript
  export default {
    holes: [
      {
        name: "店舗名",
        code: "店舗コード"
      }
    ]
  };
  ```

### 2.6 データベース操作
- SQLiteとBigQueryの操作を分離
- トランザクション処理を実装
  ```javascript
  const saveData = async (db, data) => {
    return new Promise((resolve, reject) => {
      db.serialize(() => {
        db.run('BEGIN TRANSACTION');
        // データ保存処理
        db.run('COMMIT', (err) => {
          if (err) reject(err);
          else resolve();
        });
      });
    });
  };
  ```

### 2.7 スクレイピング処理
- Puppeteerの設定を統一
  ```javascript
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  ```
- エラーハンドリングの強化
  ```javascript
  page.on("response", async response => {
    if (response.status() >= 400) {
      console.error(`HTTPエラー: ${response.status()} ${response.url()}`);
    }
  });
  ```

### 2.8 ユーティリティ関数
- 共通処理は`util`ディレクトリに集約
- 関数の責務を明確に分離
  ```javascript
  // 日付処理
  const formatDate = (date) => { ... };
  
  // データ整形
  const formatData = (data) => { ... };
  ```

## 3. データ処理
### 3.1 データ整形
- CSVなどに出力する可能性のある数値データは適切に整形してから使用
  ```javascript
  function cleanNumber(value) {
    return parseInt(value.replace(/,/g, '').replace(/^\+/, ''));
  }
  ```

### 3.2 データ構造
- オブジェクトは明確なプロパティ名を使用
- 配列操作は map, filter, reduce などの関数型メソッドを優先

## 4. 外部ライブラリ
### 4.1 Puppeteer
- ページ遷移時は適切なインターバルを設定
- セレクタは具体的に指定
- エラーハンドリングを必ず実装

## 5. 設定ファイル
### 5.1 構成
- 環境依存の値は設定ファイルに分離
- 設定は明確な構造化を行う
  ```javascript
  module.exports = {
    holes: [
      {
        name: "店舗名",
        code: "店舗コード"
      }
    ]
  };
  ```

## 6. ログ出力
### 6.1 ログレベル
- エラー: `console.error()`
- 情報: `console.log()`
- デバッグ情報は本番環境では出力しない

### 6.2 ログフォーマット
- 日時、処理内容、対象を明確に記載
- エラーログは具体的な情報を含める
